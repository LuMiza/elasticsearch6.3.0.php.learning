<?php
/**
 *
 * User: Rumble
 * Date: 2018/10/21
 * Time: 12:34
 */

namespace Model;


use es\EsModel;

class GoodsModel extends EsModel
{

    private $index_name = 'shopping';

    private $type_name = 'product';

    /**
     * 创建索引
     * @return bool
     */
    public function createIndex()
    {
        $indexs = $this->indexs();
        if (! in_array($this->index_name, array_keys($indexs))) {
            $result = $this->addIndex($this->index_name);
            if (isset($result['error'])) {
                return false;
            }
            return true;
        }
        return true;
    }

    /**
     * 设置映射
     * @param \es\类型 $type_name
     * @param \es\索引名 $index_name
     * @return array|mixed
     */
    public function setMapping($type_name='', $index_name=null)
    {
        $index_name = $this->index_name;
        $type_name = $this->type_name;
        $params = [
            'index' => $index_name,
            'type'  => $type_name,
            'body'  => [
                $type_name => [
                    '_source' => [
                        'enabled' => true
                    ],
                    'properties' => [
                        'id' => [
                            'type' => 'integer', // 整型
                        ],
                        //分类
                        'category_id' => [
                            'type' => 'integer', // 整型
                        ],
                        'title' => [
                            'type' => 'text', // 字符串型
                            'index' => true,
                            'analyzer' => 'ik_max_word',
                            'fielddata' => true,//以下fielddata fields用作聚合查询用的
                            'fields'  => [
                                'raw' => [
                                    'type' => 'keyword'
                                ],
                            ],
                        ],
                        //商品价格
                        'price' => [
                            'type' => 'float',
                        ],
                        //上下架 0:下架；1：上架；9删除
                        'status' => [
                            'type' => 'integer',
                        ],
                        //排序
                        'sort' => [
                            'type' => 'integer',
                        ],
                        //库存
                        'stock' => [
                            'type' => 'integer',
                        ],
                        //添加时间
                        'add_time' => [
                            'type' => 'date',
                            'format' => 'yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis',
                        ],
                    ]
                ],
            ]
        ];
        try {
            $return = $this->getMapping($this->index_name);
            if (isset($return[$this->index_name]['mappings'])) {
                if (! in_array($this->type_name,array_keys($return[$this->index_name]['mappings']))) {
                    $res =  $this->client->indices()->putMapping($params);
                    return $res;
                }
            }
            return true;
        } catch (\Exception $e) {
            return json_decode($e->getMessage(), true);
        }
    }

    /**
     * @param null $index_name
     * @param null $type_name
     * @return mixed
     */
    public function getMapping($index_name = null, $type_name = null)
    {
        return parent::getMapping($this->index_name, $type_name); // TODO: Change the autogenerated stub
    }

    /**
     * 从mysql中获取wx_product表的数据
     * @param int $page 页码
     * @return array
     * @throws \Exception
     */
    public function getDbProducts($page=1)
    {
        $page_size = 10;
        $column = [
            'id',
            'title',
            'stock',
            'price',
            'pid(category_id)',
            'dt(add_time)',
            'sort',
            'status',
        ];
        $where = [
            'LIMIT' => [($page-1) * $page_size,$page_size],
            'ORDER' => 'id desc'
        ];
        return db()->select('wx_product',$column,$where);
    }

    /**
     * 将数据添加到elasticsearch中
     * @param int $max_page
     * @return bool
     * @throws \Exception
     */
    public function insertAll($max_page=1)
    {
        for ($p=1; $p<=$max_page; $p++) {
            $product_data = $this->getDbProducts($p);
            if ($product_data) {
                foreach ($product_data as $key => $val) {
                    $res = $this->get($val['id']);
                    if (isset($res['found']) && !$res['found']) {
                        $res = $this->addDoc($val['id'], $val, $this->index_name, $this->type_name);
                        if (!isset($res['_shards']['successful']) || !$res['_shards']['successful']) {
                            return false;
                        }
                    }
                }
            }
            sleep(1);
        }
        return true;
    }

    public function get($id)
    {
        $params = [
            'index' => $this->index_name,
            'type'  => $this->type_name,
            'id' => $id
        ];
        try {
            return  $this->client->get($params);
        } catch (\Exception $e) {
            return json_decode($e->getMessage(), true);
        }
    }

    /**
     * 查询数据
     * @param $params
     * @param null $callback
     * @return array
     */
    public function search($params=null, $callback=null)
    {
        if (! $params) {
            return false;
        }
        try {
            $data =  $this->client->search($params);
            if ($callback instanceof \Closure) {
                return call_user_func_array($callback, [$data]);
            } else {
                return $data;
            }
        } catch (\Exception $e) {
            return json_decode($e->getMessage(), true);
        }
    }
}